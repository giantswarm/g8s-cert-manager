apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cert-manager.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: {{ template "cert-manager.name" . }}
    app.kubernetes.io/name: {{ template "cert-manager.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: "controller"
    giantswarm.io/service-type: "managed"
    helm.sh/chart: {{ template "cert-manager.chart" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "cert-manager.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: "controller"
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "cert-manager.name" . }}
        app.kubernetes.io/name: {{ template "cert-manager.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: "controller"
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ template "cert-manager.chart" . }}
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: {{ template "cert-manager.serviceAccountName" . }}
      priorityClassName: {{ .Values.global.priorityClassName | quote }}
      securityContext:
        fsGroup: {{ default 1001 .Values.securityContext.fsGroup }}
        fsUser: {{ default 1001 .Values.securityContext.fsUser }}
      initContainers:
      - name: disable-webhook-validation
        image: "{{ .Values.Installation.V1.Registry.Domain }}/{{ .Values.kubectl.image.name }}:{{ .Values.kubectl.image.tag }}"
        args:
          - label
          - namespace
          - {{ .Release.Namespace | quote }}
          - certmanager.k8s.io/disable-validation=true
          - --overwrite=true
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
      containers:
        - name: {{ .Chart.Name }}
          {{ if (.Values.Installation) }}
          image: "{{ .Values.Installation.V1.Registry.Domain }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          {{ else }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          {{ end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace={{ .Values.global.leaderElection.namespace }}
          {{- with .Values.ingressShim }}
          {{- if .defaultIssuerName }}
          - --default-issuer-name={{ .defaultIssuerName }}
          {{- end }}
          {{- if .defaultIssuerKind }}
          - --default-issuer-kind={{ .defaultIssuerKind }}
          {{- end }}
          {{- end }}
          - --webhook-namespace=$(POD_NAMESPACE)
          ports:
          - containerPort: 9402
            protocol: TCP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
